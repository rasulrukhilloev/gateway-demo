version: "3.4"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
#    networks:
#      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  kafka:
    image: confluentinc/cp-kafka:latest
#    networks:
#      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
#    networks:
#      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  nats:
    image: nats
    ports:
      - "4222:4222"

  rabbitmq:
    image: rabbitmq:management
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  postgres-loan:
    container_name: postgres-loan
    image: postgres:13.5
    restart: always
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=loan
    volumes:
      - postgres-loan:/var/lib/postgresql/loan
    ports:
      - '5434:5432'
  postgres-cards:
    container_name: postgres-cards
    image: postgres:13.5
    restart: always
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=cards
    volumes:
      - postgres-cards:/var/lib/postgresql/cards
    ports:
      - '5433:5432'
  postgres-auth:
    container_name: postgres-auth
    image: postgres:13.5
    restart: always
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=auth
    volumes:
      - postgres-auth:/var/lib/postgresql/auth
    ports:
      - '5432:5432'
  postgres-deposit:
    container_name: postgres-deposit
    image: postgres:13.5
    restart: always
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=deposit
    volumes:
      - postgres-deposit:/var/lib/postgresql/deposit
    ports:
      - '5436:5432'

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
      target: development
    env_file:
      - ./auth/.env
    depends_on:
      - kafdrop
      - postgres-auth
    volumes:
      - ./auth:/usr/src/app
#      - auth-node-modules:/usr/src/app/node_modules
    command: >
      sh -c "
      echo 'Waiting for postgres...';
      while ! nc -z postgres-auth 5432; do
        sleep 1;
      done;
      echo 'Postgres is up - executing migration for auth';
      npx prisma migrate deploy && npm run start:dev
      "
  loan:
    build:
      context: ./loan
      dockerfile: Dockerfile
      target: development
    env_file:
      - ./loan/.env
    depends_on:
      - postgres-loan
    volumes:
      - ./loan:/usr/src/app
    #      - loan-node-modules:/usr/src/app/node_modules
    command: >
      sh -c "
      echo 'Waiting for postgres...';
      while ! nc -z postgres-loan 5432; do
        sleep 1;
      done;
      echo 'Postgres is up - executing migration for loan';
      npx prisma migrate deploy && npm run start:dev
      "
  cards:
    build:
      context: ./cards
      dockerfile: Dockerfile
      target: development
    env_file:
      - ./cards/.env
    depends_on:
      - kafdrop
      - postgres-cards
    volumes:
      - ./cards:/usr/src/app
#      - cards-node-modules:/usr/src/app/node_modules
    command: >
      sh -c "
      echo 'Waiting for postgres...';
      while ! nc -z postgres-cards 5432; do
        sleep 1;
      done;
      echo 'Postgres is up - executing migrations for cards';
      npx prisma migrate deploy && npm run start:dev
      "
  deposit:
    build:
      context: ./deposit
      dockerfile: Dockerfile
      target: development
    env_file:
      - ./deposit/.env
    depends_on:
      - postgres-deposit
    volumes:
      - ./deposit:/usr/src/app
    #      - deposit-node-modules:/usr/src/app/node_modules
    command: >
      sh -c "
      echo 'Waiting for postgres...';
      while ! nc -z postgres-deposit 5432; do
        sleep 1;
      done;
      echo 'Postgres is up - executing migration for deposit';
      npx prisma migrate deploy && npm run start:dev
      "
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
      target: prod
    depends_on:
      - kafdrop
    volumes:
      - ./gateway:/usr/src/app
    #      - gateway-node-modules:/usr/src/app/node_modules
    ports:
      - '3000:3000'


volumes:
  postgres-auth:
  postgres-cards:
  postgres-loan:
  postgres-deposit:
  rabbitmq-data:
